:py:mod:`bfit.density`
======================

.. py:module:: bfit.density

.. autoapi-nested-parse::

   Density Module.

   AtomicDensity:
       Information about atoms obtained from .slater file and able to construct atomic density
           (total, core and valence) from the linear combination of Slater-type orbitals.
       Elements supported by default from "./bfit/data/examples/" range from Hydrogen to Xenon.

   ..
       !! processed by numpydoc !!


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   bfit.density.AtomicDensity




.. py:class:: AtomicDensity(element, anion=False, cation=False)

   
   Atomic Density Class.

   Reads and Parses information from the .slater file of a atom and stores it inside this class.
   It is then able to construct the (total, core and valence) electron density based
   on linear combination of orbitals where each orbital is a linear combination of
   Slater-type orbitals.
   Elements supported by default from "./bfit/data/examples/" range from Hydrogen to Xenon.

   .. attribute:: Attributes relating to the standard electron configuration.

   .. attribute:: energy

      Energy of that atom.

      :type: list

   .. attribute:: configuration

      Return the electron configuration of the element.

      :type: str

   .. attribute:: orbitals

      List of strings representing each of the orbitals in the electron configuration.
      For example, Beryllium has ["1S", "2S"] in its electron configuration.
      Ordered based on "S", "P", "D", etc.

      :type: list, (M,)

   .. attribute:: orbitals_occupation

      Returns the number of electrons in each of the orbitals in the electron configuration.
      e.g. Beryllium has two electrons in "1S" and two electrons in "2S".

      :type: ndarray, (M, 1)

   .. attribute:: Attributes relating to representing orbitals as linear combination of Slater-type orbitals.

   .. attribute:: orbital_energy

      Energy of each of the N Slater-type orbital.

      :type: list, (N, 1)

   .. attribute:: orbitals_cusp

      Cusp of each of the N Slater-type orbital. Same ordering as `orbitals`. Does not exist
      for Heavy atoms past Xenon.

      :type: list, (N, 1)

   .. attribute:: orbitals_basis

      Keys are the orbitals in the electron configuration. Each orbital has N Slater-type orbital
      attached to them.

      :type: dict

   .. attribute:: orbitals_exp

      Key is the orbital in the electron configuration and the item of that key is the Slater
       exponents attached
       to each N Slater-type orbital.

      :type: dict (str : ndarray(N, 1))

   .. attribute:: orbitals_coeff

      Key is the orbital in the electron configuration (e. 1S, 2S or 2P) and the item is the
      Slater coefficients attached to each of the N Slater-type orbital.

      :type: dict (str : ndarray(N, 1))

   .. attribute:: basis_numbers

      Key is orbital in electron configuration and the item is the basis number of each of
      the N Slater-type orbital. These are the principal quantum number to each Slater-type
      orbital.

      :type: dict (str : ndarray(N, 1))

   .. method:: atomic_density(mode="total") :

      Construct the atomic density from the linear combinations of slater-type orbitals.
      Can compute the total (default), core and valence atomic density.

   .. method:: lagrangian_kinetic_energy :

      Construct the Positive Definite Kinetic energy.

   .. rubric:: Examples

   Grab information about Beryllium.
   >> be =  AtomicDensity("be")

   Some of the attributes are the following.
   >> print(be.configuration) #  Should "1S(2)2S(2)".
   >> print(be.orbitals)  # ['1S', '2S'].
   >> print(be.orbitals_occupation) # [[2], [2]] Two electrons in each orbital.
   >> print(be.orbitals_cusp)  # [1.0001235, 0.9998774].

   The Slatar coefficients and exponents of the 1S orbital can be obtained as:
   >> print(be.orbital_coeff["1S"])
   >> print(be.orbitals_exp["1S"])

   The total, core and valence electron density can be obtained as:
   >> points = np.arange(0., 25., 0.01)
   >> total_density = be.atomic_density(points, "total")
   >> core_density = be.atomic_density(points, "core")
   >> valence_density = be.atomic_density(points, "valence")

   .. rubric:: References

   [1] "Analytical Hartree–Fock wave functions subject to cusp and asymptotic constraints:
       He to Xe, Li+ to Cs+, H− to I−" by T. Koga, K. Kanayama, S. Watanabe and A.J. Thakkar.















   ..
       !! processed by numpydoc !!
   .. py:method:: slater_orbital(exponent, number, points)
      :staticmethod:

      
      Compute the Slater-type orbitals on the given points.

      A Slater-type orbital is defined as:
      .. math::
          R(r) = N r^{n-1} e^{- C r)

      where,
          :math:`n` is the principal quantum number of that orbital.
          :math:`N` is the normalizing constant.
          :math:`r` is the radial point, distance to the origin.
          :math:`C` is the zeta exponent of that orbital.

      :param exponent: The zeta exponents of Slater orbitals.
      :type exponent: ndarray, (M, 1)
      :param number: The principle quantum numbers of Slater orbitals.
      :type number: ndarray, (M, 1)
      :param points: The radial grid points.
      :type points: ndarray, (N,)

      :returns: **slater** -- The Slater-type orbitals evaluated on the grid points.
      :rtype: ndarray, (N, M)

      .. seealso:: :meth:`The`, :meth:`The`















      ..
          !! processed by numpydoc !!

   .. py:method:: phi_matrix(self, points, deriv=False)

      
      Compute the linear combination of Slater-type atomic orbitals on the given points.

      Each row corresponds to a point on the grid, represented as :math:`r` and
       each column is represented as a linear combination of Slater-type atomic orbitals
       of the form:

      .. math::
          \sum c_i R(r, n_i, C_i)

      where,
          :math:`c_i` is the coefficient of the Slater-type orbital.
          :math:`C_i` is the zeta exponent attached to the Slater-type orbital.
          :math:`n_i` is the principal quantum number attached to the Slater-type orbital.
          :math:`R(r, n_i, C_i)` is the Slater-type orbital.
          i ranges from 0 to K-1 where K is the number of orbitals in electron configuration.

      :param points: The radial grid points.
      :type points: ndarray, (N,)
      :param deriv: If true, use the derivative of the slater-orbitals.
      :type deriv: bool

      :returns: **phi_matrix** -- The linear combination of Slater-type orbitals evaluated on the grid points, where K is
                the number of orbitals. The order is S orbitals, then P then D.
      :rtype: ndarray(N, K)

      .. rubric:: Notes

      - At r = 0, the derivative of slater-orbital is undefined and this function returns
          zero instead. See "derivative_slater_type_orbital".















      ..
          !! processed by numpydoc !!

   .. py:method:: atomic_density(self, points, mode='total')

      
      Compute atomic density on the given points.

      The total density is written as a linear combination of Slater-type orbital
      whose coefficients is the orbital occupation number of the electron configuration:
      .. math::
          \sum n_i |P(r, n_i, C_i)|^2

      where,
          :math:`n_i` is the number of electrons in orbital i.
          :math:`P(r, n_i, C_i)` is a linear combination of Slater-type orbitals evaluated
              on the point :math:`r`.

      For core and valence density, please see More Info below.

      :param points: The radial grid points.
      :type points: ndarray, (N,)
      :param mode: The type of atomic density, which can be "total", "valence" or "core".
      :type mode: str

      :returns: **dens** -- The atomic density on the grid points.
      :rtype: ndarray, (N,)

      .. rubric:: Notes

      The core density and valence density is respectively written as:
      .. math::
          \sum n_i (1 - e^{-|e_i - e_{homo}|^2}) |P(r, n_i, C_i)|
          \sum n_i e^{-|e_i - e_{homo}|^2}) |P(r, n_i. C_i)|

      where,
          :math:`e_i` is the energy of the orbital i.
          :math:`e_{homo}` is the energy of the highest occupying orbital.















      ..
          !! processed by numpydoc !!

   .. py:method:: derivative_slater_type_orbital(exponent, number, points)
      :staticmethod:

      
      Compute the derivative of Slater-type orbitals on the given points.

      A Slater-type orbital is defined as:
      .. math::
          \frac{d R(r)}{dr} = \bigg(\frac{n-1}{r} - C \bigg) N r^{n-1} e^{- C r),

      where,
          :math:`n` is the principal quantum number of that orbital.
          :math:`N` is the normalizing constant.
          :math:`r` is the radial point, distance to the origin.
          :math:`C` is the zeta exponent of that orbital.

      :param exponent: The zeta exponents of Slater orbitals.
      :type exponent: ndarray, (M, 1)
      :param number: The principle quantum numbers of Slater orbitals.
      :type number: ndarray, (M, 1)
      :param points: The radial grid points. If points contain zero, then it is undefined at those
                     points and set to zero.
      :type points: ndarray, (N,)

      :returns: **slater** -- The Slater-type orbitals evaluated on the grid points.
      :rtype: ndarray, (N, M)

      .. rubric:: Notes

      - At r = 0, the derivative is undefined and this function returns zero instead.

      .. rubric:: References

      See wikipedia page on "Slater-Type orbitals".















      ..
          !! processed by numpydoc !!

   .. py:method:: lagrangian_kinetic_energy(self, points)

      
      Positive definite or Lagrangian kinetic energy density.

      :param points: The radial grid points.
      :type points: ndarray,(N,)

      :returns: **energy** -- The kinetic energy on the grid points.
      :rtype: ndarray, (N,)















      ..
          !! processed by numpydoc !!

   .. py:method:: derivative_density(self, points)

      
      Return the derivative of the atomic density on a set of points.

      :param points: The radial grid points.
      :type points: ndarray,(N,)

      :returns: **deriv** -- The derivative of atomic density on the grid points.
      :rtype: ndarray, (N,)















      ..
          !! processed by numpydoc !!



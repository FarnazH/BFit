:py:mod:`bfit.greedy.greedy_utils`
==================================

.. py:module:: bfit.greedy.greedy_utils

.. autoapi-nested-parse::

   Contains utility functions that are used by any greedy-fitting algorithms.

   As of know, most of these functions rely on the basis function to depend on
   only one parameters. E.g. e^(-x) or e^(-x^2) but not e^(-x - y).

   ..
       !! processed by numpydoc !!


Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   bfit.greedy.greedy_utils.check_redundancies
   bfit.greedy.greedy_utils.get_next_choices
   bfit.greedy.greedy_utils.get_two_next_choices
   bfit.greedy.greedy_utils.get_next_possible_coeffs_and_exps2



.. py:function:: check_redundancies(coeffs, fparams, simi=0.001)

   
   Check if the fparams have similar values and groups them together.

   If any two function parameters have similar values, then one of the
   function parameters is removed, and the corresponding coefficient,
   is doubled.
   Note: as of now this only works if each basis function depends on only one
   parameters e.g. e^(-x), not e^(-x + y).

   :param coeffs: Coefficients of the basis function set.
   :type coeffs: np.ndarray
   :param fparams: Function Parameters of the basis function set.
   :type fparams: np.ndarray
   :param simi: Value that indicates the treshold for how close two parameters are.
   :type simi: float

   :returns: New coefficients and new exponents, where close
             values are grouped together.
   :rtype: (np.ndarray, np.ndarray)















   ..
       !! processed by numpydoc !!

.. py:function:: get_next_choices(factor, coeffs, fparams, coeff_val=100.0)

   
   Get the next set of (n+1) fparams, used by the greedy-fitting algorithm.

   Given a set of n fparams and n coeffs, this method gets the next (n+1)
   fparams by using the factor.
   A list of (n+1) choices are returned. They are determined as follows,
   if fparams = [a1, a2, ..., an] and coeffs = [c1, c2, ..., cn].
   Then each choice is either
               [a1 / factor, a2, a3, .., an] & coeffs = [c1, c1, c2, ..., cn],
               [a1, a2, ..., (ai + a(i+1)/2, a(i+1), ..., an] & similar coeffs,
               [a1, a2, ..., factor * an] & coeffs = [c1 c2, ..., cn, cn].
   :param factor: Number used to give two choices by multiplying each end point.
   :type factor: float
   :param coeffs: Coefficients of the basis functions.
   :type coeffs: np.ndarray
   :param fparams: Function parameters.
   :type fparams: np.ndarray
   :param coeff_val: Number used to fill in the coefficient value for each guess.
   :type coeff_val: float

   :returns: List of the next possible initial choices for greedy based on factor.
   :rtype: list















   ..
       !! processed by numpydoc !!

.. py:function:: get_two_next_choices(factor, coeffs, fparams, coeff_val=100.0)

   
   Return a list of (n+2) set of initial guess for fparams for greedy.

   Assuming coeffs=[c1, c2 ,... ,cn] and fparams =[a1, a2, ..., an]. The
   next (n+2) choice is either a combination of a endpoint guess and a
   midpoint, or two mid point guess or two endpoint guess. In other words:
       [a1 / factor, ..., (ai + a(i+1))/2, ..., an],
       [a1, ..., (aj + a(j+1))/2, a(j+1) ..., (ai + a(i+1))/2, a(i+1), .., an],
       [a1 / factor, a2, a3, ..., a(n-1), factor * an], respetively.

   :param factor: Number used to give two choices by multiplying each end point.
   :type factor: float
   :param coeffs: Coefficients of the basis functions.
   :type coeffs: np.ndarray
   :param fparams: Function parameters.
   :type fparams: np.ndarray
   :param coeff_val: Number used to fill in the coefficient value for each guess.
   :type coeff_val: float

   :returns: List of the next possible initial choices for greedy based on factor.
   :rtype: list















   ..
       !! processed by numpydoc !!

.. py:function:: get_next_possible_coeffs_and_exps2(factor, coeffs, exps, coeff_val=100.0)

   
















   ..
       !! processed by numpydoc !!


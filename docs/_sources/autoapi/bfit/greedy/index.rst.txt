:py:mod:`bfit.greedy`
=====================

.. py:module:: bfit.greedy

.. autoapi-nested-parse::

   
















   ..
       !! processed by numpydoc !!


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   greedy_kl/index.rst
   greedy_lq/index.rst
   greedy_strat/index.rst
   greedy_utils/index.rst
   optimize/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   bfit.greedy.GreedyStrategy
   bfit.greedy.GreedyKL
   bfit.greedy.GreedyLeastSquares




.. py:class:: GreedyStrategy

   Bases: :py:obj:`object`

   
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: __metaclass__
      

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_cost_function(self)
      :abstractmethod:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_best_one_function_solution(self)
      :abstractmethod:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_next_iter_params(self)
      :abstractmethod:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_optimization_routine(self, local=False, *args)
      :abstractmethod:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_errors_from_model(self, params)
      :abstractmethod:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: store_errors(self, params)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: _find_best_lparams(self, param_list)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: __call__(self, factor, max_numb_funcs=30, backward_elim_funcs=None, add_choice_funcs=None, ioutput=False)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: _final_exit_info(self, num_func, max_func, best_val, prev_gval, redum)

      
















      ..
          !! processed by numpydoc !!


.. py:class:: GreedyKL(grid, density, norm, splitting_func=get_next_choices, eps_coeff=0.001, eps_exp=0.0001, factor=2)

   Bases: :py:obj:`bfit.greedy.greedy_strat.GreedyStrategy`

   
















   ..
       !! processed by numpydoc !!
   .. py:method:: density(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: norm(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: grid(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_model(self, params)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_cost_function(self, params)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_best_one_function_solution(self)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_next_iter_params(self, factor, params)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_optimization_routine(self, params, local=False)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_errors_from_model(self, params)

      
















      ..
          !! processed by numpydoc !!


.. py:class:: GreedyLeastSquares(grid, density, splitting_func=get_next_choices, factor=2)

   Bases: :py:obj:`bfit.greedy.greedy_strat.GreedyStrategy`

   
















   ..
       !! processed by numpydoc !!
   .. py:method:: density(self)
      :property:

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_cost_function(self, params)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: _solve_one_function_weight(self, weight)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_best_one_function_solution(self)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_next_iter_params(self, params)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_optimization_routine(self, params)

      
















      ..
          !! processed by numpydoc !!

   .. py:method:: get_errors_from_model(self, params)

      
















      ..
          !! processed by numpydoc !!


